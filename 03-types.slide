Типове

* Типове

* Собствени типове

- От всеки тип в езика можем да създаваме наши типове
- Не се различават по нищо от вградените

    type integer int
    type float float64
    type chars string

- Не особено полезно, на пръв поглед
- Но те могат и повече

* Нека разгледаме функцията Abs

    func Abs(i integer) integer {
        switch {
        case i < 0:
            return -i
        case i == 0:
            return 0
        default:
            return i
        }
    }

    var number integer = -42
    positiveInteger := Abs(number)

- Така се дефинира обикновена функция `Abs`, която се извиква като ѝ се подаде integer като аргумент
- Това не е "обектно-ориентираният" начин да се направи подобно нещо

* "Обектно-ориентираният" начин да се направи подобно нещо

    func (i integer) Abs() integer {
        switch {
        case i < 0:
            return -i
        case i == 0:
            return 0
        default:
            return i
        }
    }

    var number integer = -42
    number.Abs()


* Какво точно е метод?

- Методите се изпълняват върху конкретен тип
- Той се нарича receiver
- Методите могат да се дефинират *само* върху типове, дефинирани в същия пакет
- Като следствие от горното правило, методите имат достъп до private полетата в типа
- На практика, дефинират държанието на типа


* Що е то receiver-а?

- Няма фиксирана ключова дума за това.
- Има просто конвенция (първата/ите букви от името на типа)
- Той може да бъде по стойност, както и указател

По стойност

- Работи се върху копие на обекта
- Това може да е скъпа операция за големи обекти

Като указател

- Работи се върху копие на указателя към обект
- Всяка промяна в метода се отразява на оригиналния обект

Няма различен синтаксис за използването на двата вида receiver-и.


* Пример

.play code/types_and_interfaces/integer.go /^type/,/end/


* nil обекти

Извикването на методи работи дори с nil pointers към обекти:

.play code/types_and_interfaces/nil_objects.go /^type/,/end/

Внимавайте с тях :)


* struct

- Същите неща могат да се правят и върху композитни типове
- Полета и методи с малка буква са private
- Нека си дефинираме типове за триъгълник и правоъгълник

.code code/types_and_interfaces/shapes.go /start types/,/end types/


* Методи за тези типове

.code code/types_and_interfaces/shapes.go /start methods/,/end methods/


* "Завързани" методи

.play code/types_and_interfaces/bound_methods.go  /^type/,


* "Развързани" методи

.play code/types_and_interfaces/bound_methods2.go  /^type/,

